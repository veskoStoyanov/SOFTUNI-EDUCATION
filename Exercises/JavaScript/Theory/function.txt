   Какво е функция: Наименовано парче код което изпълнява задача.  Намаля повтарянето на код и прави езика по динамичен.
 Първокласни : Могат да бъдат създавани, подавани и връщани от други функции.Всички функции в JS са от first class
 могат да се разглеждат като обекти или да се присвоявят на променливи.
    Декларираните(declaration) функции се "хойстват" а записаните в променливи(expression) не, което означава
 че можем да извикаме функцията преди да сме я декларирали.

 function sum(a, b) {
    return a + b;
 }

 let myFunc = function (a, b) {
    console.log(a + b);
     
 }

   Higher-order functions : всички функции в JS могат да бъдат higher-order functions. Примема функция като параметър
 или връщат друга функция, или и двете, като могат да правят и други операции през това време(map, reduce, filter).

 function sum(a = 5, b = 6) {
    console.log(a + b);


 }

function hightOrderFunc(sums) {
    console.log('return myFunc');
    return sums;
}

   let myFunc = hightOrderFunc(sum);
 myFunc();

   Curyying : Разцепваме по сложна функция която приема няколко параметара в няколко функции, които приемат само един 
  параметър. Ако имаме само първия първия параметър , а другите ще ги получим след време. Можем да си извикаме функцията с първия 
  параметър и да си запазим резултата в променлива докато дойте и следващия параметър. Използва се най вече при заявки.
  Function Composition - Правим нови функции от старите като им подаваме аргументи. Основната функция е да забавим 
  изпълнението на функцията докато имаме всички параметри.
  
  function sum2(a, b,  c) {
  return a + b + c;
  }

  function sum3(a) {
    return (b) => {
        return ( c) =>  {
            return a + b + c;
        }
    }
 }

 console.log(sum3(5)(5)(5));

   Partial application:Превръщаме Функция която приема множество параметри във такава която приема по малко параметри като
   фиксираме част от тях. Това е един от многото начини да постигнем curyying , ако всеки път махаме по един параметър.
  Голяма преизпозлваемост , намаля бъгове, 


  function myFunc(a, b, c, d) {
  console.log(a + b + c + d);

}

function partial(a, c, d) {
    return function (b) {
        myFunc(a, b, c, d)
    }
}

   let involke = partial(1, 2, 3);
   involke(4); // 10
   involke(5); // 11


   Immediately-Invoked Function Expression(IIFE) :
 Анонимна Функция която се извиква сама,  изпълнява се веднага след декларацията и не остава в паметта, не замърсява глобания сколп.	
  Решава проблем с декларирането на прекалено много променливи/функции и измислянето на имена за тях

 (function() {
   console.log('I am function expression!');
 }())

 Ако искаме да дадем име можем да я запазим в променлива.

 let iife = function () {
   console.log('I am function expression!');
 }()

   Closure :
     Запечатваме някакво състояние във функцията
  можем да върнем друга функция като резултат от нащо iife
	по този начин правим "енкапсулация"(private) в ООП, като counter не можем да го достъпваме отвън освен през фунцията.

   let f = function () {
    let counter = 0;
    return function (){
      console.log(++counter);
      
    }
  }

  let cnr = f();
  let cnr2 = f();
  cnr();// 1
  cnr(); // 2
  cnr2(); // 1

	
	Predicate - функция която връща true или false



