// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`redux should render corecttly! Footer should work properly! 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Footer) />
</ContextProvider>
`;

exports[`redux should render corecttly! Preloader should work properly! 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <Connect(Preloader) />
</ContextProvider>
`;

exports[`redux should render corecttly! checks for html changes in LoggedIn 1`] = `
<ul>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/catalog"
    >
      Home
    </NavLink>
  </li>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/video"
    >
      Videos
    </NavLink>
  </li>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/create/moto"
    >
      Add Moto
    </NavLink>
  </li>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/mail"
    >
      Mail
    </NavLink>
  </li>
  <div
    className="right"
  >
    <li>
      Welcome, 
      !
    </li>
    <li>
      <NavLink
        activeStyle={
          Object {
            "color": "red",
          }
        }
        to="/profile"
      >
        Profile
      </NavLink>
    </li>
    <li>
      <NavLink
        activeStyle={
          Object {
            "color": "red",
          }
        }
        to="/logout"
      >
        Logout
      </NavLink>
    </li>
  </div>
</ul>
`;

exports[`redux should render corecttly! checks for html changes in LoggedOut 1`] = `
<ul>
  <li>
    <Link
      to="/"
    >
      Home
    </Link>
  </li>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/about"
    >
      About
    </NavLink>
  </li>
  <li>
    <NavLink
      activeStyle={
        Object {
          "color": "red",
        }
      }
      to="/games"
    >
      Games
    </NavLink>
  </li>
  <div
    className="right"
  >
    <li>
      <NavLink
        activeStyle={
          Object {
            "color": "red",
          }
        }
        to="/login"
      >
        Login
      </NavLink>
    </li>
    <li>
      <NavLink
        activeStyle={
          Object {
            "color": "red",
          }
        }
        to="/register"
      >
        Register
      </NavLink>
    </li>
  </div>
</ul>
`;

exports[`redux should render corecttly! checks for html changes in NotFound 1`] = `
<div>
  <img
    alt="sad-face"
    className="sad-face"
    src="https://cdn3.iconfinder.com/data/icons/pictomisc/100/sadface-512.png"
  />
  <h1
    className="not-found"
  >
    404 - Page Not Found
  </h1>
</div>
`;

exports[`redux should render corecttly! checks for html changes in Routes 1`] = `
<div>
  <Switch>
    <Route
      component={[Function]}
      exact={true}
      path="/"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Login)",
          "type": [Function],
        }
      }
      exact={true}
      path="/login"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/register"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Logout)",
          "type": [Function],
        }
      }
      exact={true}
      path="/logout"
    />
    <Route
      component={[Function]}
      exact={true}
      path="/about"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      path="/catalog"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/video"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/play/:id"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/details/:id"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/create/video"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/create/moto"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/comments/:id"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/moto/edit/:id"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/profile"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/contact/:name"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/list/contacts"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(ContactDetails)",
          "type": [Function],
        }
      }
      exact={true}
      path="/contact/details/:id"
    />
    <Route
      component={[Function]}
      exact={true}
      path="/maps/:city"
    />
    <Route
      component={[Function]}
      exact={true}
      path="/details/getWeather/:location"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/mail"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(DetailsBox)",
          "type": [Function],
        }
      }
      exact={true}
      path="/contact/details/user/:id"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Main)",
          "type": [Function],
        }
      }
      exact={true}
      path="/hotels"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/reservation"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(Component)",
          "type": [Function],
        }
      }
      exact={true}
      path="/hotel/create"
    />
    <Route
      component={[Function]}
      exact={true}
      path="/games"
    />
    <Route
      component={[Function]}
      exact={true}
      path="/games/miner"
    />
    <Route
      component={[Function]}
    />
  </Switch>
</div>
`;
